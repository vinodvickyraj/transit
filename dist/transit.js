class K{constructor(x){this.baseUrl=document.querySelector('meta[name="base-url"]')?.getAttribute("content")||"",this.csrfToken=document.querySelector('meta[name="csrf-token"]')?.getAttribute("content")||"",this.headers={"X-CSRF-Token":this.csrfToken},this.hooks=new this.HookManager,this.initEventListeners(x),this.triggerLoadEvents(x),document.dispatchEvent(new CustomEvent("TransitInitialized",{detail:{instance:this}}))}initEventListeners(x){const B=["load","submit","change","click","dblclick","blur","focus","focusin","focusout","keydown","keypress","keyup"];this.hooks.applyFilters("modifyEvents",B,x).forEach((G)=>{x.querySelectorAll(`[on-${G}]`).forEach((F)=>{F.addEventListener(G,this.handleEvent.bind(this))})}),document.dispatchEvent(new CustomEvent("TransitReady",{detail:{scope:x}}))}triggerLoadEvents(x){x.querySelectorAll("[on-load]").forEach((B)=>{B.dispatchEvent(new Event("load"))})}async handleEvent(x){x.preventDefault();const B=x.target.closest(`[on-${x.type}]`);if(!B||B.classList.contains("processing"))return;if(await this.hooks.doAction("beforeRequest",B,x)!==!1)this.processEvent(B,x)}processEvent(x,B){const C=x.getAttribute(`on-${B.type}`),G=x.getAttribute("method")||"POST";if(C)this.toggleProcessingState(x,!0),this.sendRequest(C,x,G).then((F)=>this.handleResponse(x,F)).catch((F)=>{console.error("An error occurred:",F),this.toggleProcessingState(x,!1)})}toggleProcessingState(x,B){if(x.classList.toggle("processing",B),x.tagName==="FORM")x.querySelectorAll('[type="submit"]').forEach((G)=>G.disabled=B);const C=document.querySelector(`[map="${x.getAttribute("key")}"]`);if(C)C.classList.toggle("processing",B)}sendRequest(x,B,C){return this.collectDataAttributes(B).then((G)=>{const F={method:C.toUpperCase(),headers:{...this.headers},cache:"no-cache"};if(F.method==="GET"){const H=new URLSearchParams(G).toString();x=H?`${x}?${H}`:x}else if(F.method==="POST")if(G instanceof FormData)F.body=G,delete F.headers["Content-Type"];else F.headers["Content-Type"]="application/x-www-form-urlencoded",F.body=new URLSearchParams(G).toString();else throw new Error("Unsupported method. Only GET and POST are allowed.");return fetch(this.baseUrl+x,F).then((H)=>{const J=H.headers.get("content-type");if(H.ok&&J&&J.includes("application/json"))return H.json();else if(H.ok&&J&&J.includes("text/html"))return H.text();else if(H.ok&&H.status===204)return{};else throw new Error("Unexpected response format")}).catch((H)=>{throw console.error("An error occurred:",H),H})})}collectDataAttributes(x){const B=new FormData;if(x.tagName==="FORM")return Promise.resolve(new FormData(x));if(x.matches("input, select, textarea")){const C=x.name||x.id;if(C)switch(x.type){case"checkbox":B.append(C,x.checked?"1":"0");break;case"radio":if(x.checked)B.append(C,x.value);break;case"file":if(x.files.length>0)B.append(C,x.files[0]);break;default:B.append(C,x.value)}}return x.getAttributeNames().forEach((C)=>{if(C.startsWith("data-"))B.append(C.slice(5),x.getAttribute(C))}),Promise.resolve(B)}readFileAsBinary(x){return new Promise((B,C)=>{const G=new FileReader;G.onload=()=>B(G.result),G.onerror=C,G.readAsArrayBuffer(x)})}handleResponse(x,B){(Array.isArray(B)?B:[B]).forEach((G)=>this.processAction(x,G)),this.toggleProcessingState(x,!1)}processAction(x,B){if(B=this.hooks.applyFilters("modifyAction",B,x),B.fn){const{name:C,arguments:G=[]}=B.fn,F=window[C];if(typeof F==="function")try{F(...G)}catch(H){console.error(`Error executing function ${C}:`,H)}else console.error(`Function ${C} is not defined`)}if(B.document)this.updateDOM(B.document);if(this.hooks.doAction("afterResponse",x,B),B.redirect)window.location.href=B.redirect;if(B.reload)location.reload()}updateDOM(x){(Array.isArray(x)?x:[x]).forEach((C)=>{const G=document.querySelectorAll(C.element||C.selector);if(!G.length)return;G.forEach((F)=>{switch(C.method){case"html":F.innerHTML=C.value,this.initEventListeners(F);break;case"append":F.insertAdjacentHTML("beforeend",C.value),this.initEventListeners(F.lastElementChild);break;case"prepend":F.insertAdjacentHTML("afterbegin",C.value),this.initEventListeners(F.firstElementChild);break;case"addClass":F.classList.add(C.value);break;case"removeClass":F.classList.remove(C.value);break;case"attr":F.setAttribute(C.value[0],C.value[1]);break;case"removeAttr":F.removeAttribute(C.value);break;case"remove":F.remove();break;case"reset":if(F.tagName==="FORM")F.reset();break;default:console.error("Unsupported DOM method:",C.method)}})})}HookManager=class{constructor(){this.actions={},this.filters={}}addAction(x,B,C=10){if(!this.actions[x])this.actions[x]=[];this.actions[x].push({callback:B,priority:C}),this.actions[x].sort((G,F)=>G.priority-F.priority)}addFilter(x,B,C=10){if(!this.filters[x])this.filters[x]=[];this.filters[x].push({callback:B,priority:C}),this.filters[x].sort((G,F)=>G.priority-F.priority)}async doAction(x,...B){if(this.actions[x]){for(let C of this.actions[x])if(await C.callback(...B)===!1)return!1}return!0}applyFilters(x,B,...C){if(this.filters[x])this.filters[x].forEach((G)=>{B=G.callback(B,...C)});return B}}}document.addEventListener("DOMContentLoaded",()=>{new K(document)});
